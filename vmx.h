#ifndef __VMM_VMX_H
#define __VMM_VMX_H

#include <linux/kvm.h>
#include <linux/mm.h>

#include "vmx.h"
#include "config.h"

enum regs {
	REG_RAX = 0,
	REG_RBX = 1,
	REG_RCX = 2,
	REG_RDX = 3,

	REG_RSP = 4,
	REG_RBP = 5,

	REG_RSI = 6,
	REG_RDI = 7,

	REG_R8 = 8,
	REG_R9 = 9,
	REG_R10 = 10,
	REG_R11 = 11,
	REG_R12 = 12,
	REG_R13 = 13,
	REG_R14 = 14,
	REG_R15 = 15,

	REG_RIP = 16,
};

// SDM Vol 3D Appendix B
enum vmcs_field_encoding {
	// B.1 16-bit fields
	// B.1.1 16-bit control fields
	VIRTUAL_PROCESSOR_IDENTIFIRE = 0x00000000,
	POSTED_INTERRUPT_NOTIFICAITON_VECTOR = 0x00000002,
	EPTP_INDEX = 0x00000004,
	// B.1.2 16-bit guest-state fields
	GUEST_ES_SELECTOR = 0x00000800,
	GUEST_CS_SELECTOR = 0x00000802,
	GUEST_SS_SELECTOR = 0x00000804,
	GUEST_DS_SELECTOR = 0x00000806,
	GUEST_FS_SELECTOR = 0x00000808,
	GUEST_GS_SELECTOR = 0x0000080a,
	GUEST_LDTR_SELECTOR = 0x0000080c,
	GUEST_TR_SELECTOR = 0x0000080e,
	GUEST_INTERRUPT_STATUS = 0x00000810,
	PML_INDEX = 0x00000812,

	// B.1.3 16-bit host-state filest
	HOST_ES_SELECTOR = 0x00000c00,
	HOST_CS_SELECTOR = 0x00000c02,
	HOST_SS_SELECTOR = 0x00000c04,
	HOST_DS_SELECTOR = 0x00000c06,
	HOST_FS_SELECTOR = 0x00000c08,
	HOST_GS_SELECTOR = 0x00000c0a,
	HOST_TR_SELECTOR = 0x00000c0c,

	// B.2 64-bit fields
	// B.2.1 64-bit control fields
	IO_BITMAP_A_FULL = 0x00002000,
	IO_BITMAP_A_HIGH = 0x00002001,
	IO_BITMAP_B_FULL = 0x00002002,
	IO_BITMAP_B_HIGH = 0x00002003,
	MSR_BITMAPS_FULL = 0x00002004,
	MSR_BITMAPS_HIGH = 0x00002005,
	VM_EXIT_MSR_STORE_ADDRESS_FULL = 0x00002006,
	VM_EXIT_MSR_STORE_ADDRESS_HIGH = 0x00002007,
	VM_EXIT_MSR_LOAD_ADDRESS_FULL = 0x00002008,
	VM_EXIT_MSR_LOAD_ADDRESS_HIGH = 0x00002009,
	VM_ENTRY_MSR_LOAD_ADDRESS_FULL = 0x0000200a,
	VM_ENTRY_MSR_LOAD_ADDRESS_HIGH = 0x0000200b,
	EXECUTIVE_VMCS_POINTER_FULL = 0x0000200c,
	EXECUTIVE_VMCS_POINTER_HIGH = 0x0000200d,
	PML_ADDRESS_FULL = 0x0000200e,
	PML_ADDRESS_HIGH = 0x0000200f,
	TSC_OFFSET_FULL = 0x00002010,
	TSC_OFFSET_HIGH = 0x00002011,
	VIRTUAL_APIC_ADDRESS_FULL = 0x00002012,
	VIRTUAL_APIC_ADDRESS_HIGH = 0x00002013,
	APIC_ACCESS_ADDRESS_FULL = 0x00002014,
	APIC_ACCESS_ADDRESS_HIGH = 0x00002015,
	POSTED_INTERRUPT_DESC_ADDR_FULL = 0x00002016,
	POSTED_INTERRUPT_DESC_ADDR_HIGH = 0x00002017,
	VM_FUNCTION_CONTROLS_FULL = 0x00002018,
	VM_FUNCTION_CONTROLS_HIGH = 0x00002019,
	EPT_POINTER_FULL = 0x0000201a,
	EPT_POINTER_HIGH = 0x0000201b,
	EOI_EXIT0_FULL = 0x0000201c,
	EOI_EXIT0_HIGH = 0x0000201d,
	EOI_EXIT1_FULL = 0x0000201e,
	EOI_EXIT1_HIGH = 0x0000201f,
	EOI_EXIT2_FULL = 0x00002020,
	EOI_EXIT2_HIGH = 0x00002021,
	EOI_EXIT3_FULL = 0x00002022,
	EOI_EXIT3_HIGH = 0x00002023,
	EPTP_LIST_ADDRESS_FULL = 0x00002024,
	EPTP_LIST_ADDRESS_HIGH = 0x00002025,
	VMREAD_BITMAP_ADDRESS_FULL = 0x00002026,
	VMREAD_BITMAP_ADDRESS_HIGH = 0x00002027,
	VMWRITE_BITMAP_ADDRESS_FULL = 0x00002028,
	VMWRITE_BITMAP_ADDRESS_HIGH = 0x00002029,
	VIRT_EXCEPTION_INFO_ADDR_FULL = 0x0000202a,
	VIRT_EXCEPTION_INFO_ADDR_HIGH = 0x0000202b,
	XSS_EXITING_BITMAP_FULL = 0x0000202c,
	XSS_EXITING_BITMAP_HIGH = 0x0000202d,
	ENCLS_EXITING_BITMAP_FULL = 0x0000202e,
	ENCLS_EXITING_BITMAP_HIGH = 0x0000202f,
	SUB_PAGE_PERMISSION_TABLE_PTR_FULL = 0x00002030,
	SUB_PAGE_PERMISSION_TABLE_PTR_HIGH = 0x00002031,
	TSC_MULTIPLIER_FULL = 0x00002032,
	TSC_MULTIPLIER_HIGH = 0x00002033,

	// B.2.2 64-bit read-only data field
	GUEST_PHYSICAL_ADDRESS_FULL = 0x00002400,
	GUEST_PHYSICAL_ADDRESS_HIGH = 0x00002401,

	// B.2.3 64-bit guest-state fields
	VMCS_LINK_POINTER_FULL = 0x00002800,
	VMCS_LINK_POINTER_HIGH = 0x00002801,
	GUEST_IA32_DEBUGCTL_FULL = 0x00002802,
	GUEST_IA32_DEBUGCTL_HIGH = 0x00002803,
	GUEST_IA32_PAT_FULL = 0x00002804,
	GUEST_IA32_PAT_HIGH = 0x00002805,
	GUEST_IA32_EFER_FULL = 0x00002806,
	GUEST_IA32_EFER_HIGH = 0x00002807,
	GUEST_IA32_PERF_GLOBAL_CTRL_FULL = 0x00002808,
	GUEST_IA32_PERF_GLOBAL_CTRL_HIGH = 0x00002809,
	GUEST_PDPTE0_FULL = 0x0000280a,
	GUEST_PDPTE0_HIGH = 0x0000280b,
	GUEST_PDPTE1_FULL = 0x0000280c,
	GUEST_PDPTE1_HIGH = 0x0000280d,
	GUEST_PDPTE2_FULL = 0x0000280e,
	GUEST_PDPTE2_HIGH = 0x0000280f,
	GUEST_PDPTE3_FULL = 0x00002810,
	GUEST_PDPTE3_HIGH = 0x00002811,
	GUEST_IA32_BNDCFGS_FULL = 0x00002812,
	GUEST_IA32_BNDCFGS_HIGH = 0x00002813,

	// B.2.4 64-bit Host-State fields
	HOST_IA32_PAT_FULL = 0x00002c00,
	HOST_IA32_PAT_HIGH = 0x00002c01,
	HOST_IA32_EFER_FULL = 0x00002c02,
	HOST_IA32_EFER_HIGH = 0x00002c03,
	HOST_IA32_PERF_GLOBAL_CTRL_FULL = 0x00002c04,
	HOST_IA32_PERF_GLOBAL_CTRL_HIGH = 0x00002c05,

	// B.3 32-bit fields
	PIN_BASED_VM_EXEC_CONTROLS = 0x00004000,
	PRIMARY_PROCESSOR_BASED_VM_EXEC_CTRLS = 0x00004002,
	EXCEPTION_BITMAP = 0x00004004,
	PAGE_FAULT_ERROR_CODE_MASK = 0x00004006,
	PAGE_FAULT_ERROR_CODE_MATCH = 0x00004008,
	CR3_TARGET_COUNT = 0x0000400a,
	VM_EXIT_CONTROLS = 0x0000400c,
	VM_EXIT_MSR_STORE_COUNT = 0x0000400e,
	VM_EXIT_MSR_LOAD_COUNT = 0x00004010,
	VM_ENTRY_CONTROLS = 0x00004012,
	VM_ENTRY_MSR_LOAD_COUNT = 0x00004014,
	VM_ENTRY_INTERRUPTION_INFO_FIELD = 0x00004016,
	VM_ENTRY_EXCEPTION_ERROR_CODE = 0x00004018,
	VM_ENTRY_INSTRUCTION_LENGTH = 0x0000401a,
	TPR_THRESHOLD = 0x0000401c,
	SECONDARY_PROCESSOR_BASED_VM_EXEC_CONTROL = 0x0000401e,
	PLE_GAP = 0x0000401e,
	PLE_WINDOW = 0x00004020,

	//B.3.2 32-bit read-only data fields
	VM_INSTRUCTIN_ERROR = 0x00004400,
	EXIT_REASON = 0x00004402,
	VM_EXIT_INSTRRUPTION_FIELD = 0x00004404,
	VM_EXIT_INTERRUPTION_ERROR_CODE = 0x00004406,
	IDT_VECTORING_INFO_FIELD = 0x00004408,
	IDT_VECTORING_ERROR_CODE = 0x0000440a,
	VM_EXIT_INSTRUCTION_LENGTH = 0x0000440c,
	VM_EXIT_INSTRUCTION_INFO = 0x0000440e,

	//B.3.3 32-bit guest-state fields
	GUEST_ES_LIMIT = 0x00004800,
	GUEST_CS_LIMIT = 0x00004802,
	GUEST_SS_LIMIT = 0x00004804,
	GUEST_DS_LIMIT = 0x00004806,
	GUEST_FS_LIMIT = 0x00004808,
	GUEST_GS_LIMIT = 0x0000480a,
	GUEST_LDTR_LIMIT = 0x0000480c,
	GUEST_TR_LIMIT = 0x0000480e,
	GUEST_GDTR_LIMIT = 0x00004810,
	GUEST_IDTR_LIMIT = 0x00004812,
	GUEST_ES_ACCESS_RIGHTS = 0x00004814,
	GUEST_CS_ACCESS_RIGHTS = 0x00004816,
	GUEST_SS_ACCESS_RIGHTS = 0x00004818,
	GUEST_DS_ACCESS_RIGHTS = 0x0000481a,
	GUEST_FS_ACCESS_RIGHTS = 0x0000481c,
	GUEST_GS_ACCESS_RIGHTS = 0x0000481e,
	GUEST_LDTR_ACCESS_RIGHTS = 0x00004820,
	GUEST_TR_ACCESS_RIGHTS = 0x00004822,
	GUEST_INTERRUPTIBILITY_STATE = 0x00004824,
	GUEST_ACTIVITY_STATE = 0x00004826,
	GUEST_SMBASE = 0x00004828,
	GUEST_IA32_SYSENTER_CS = 0x0000482a,
	VMX_PREEMPTION_TIMER_VALUE = 0x0000482e,

	//B.3.4 32-bit host-state field
	HOST_IA32_SYSENTER_CS = 0x00004c00,

	//B.4 Natural-width fields
	//B.4.1 natural-width control fields
	CR0_GUEST_HOST_MASK = 0x00006000,
	CR4_GUEST_HOST_MASK = 0x00006002,
	CR0_READ_SHADOW = 0x00006004,
	CR4_READ_SHADOW = 0x00006006,
	CR3_TARGET_VALUE_0 = 0x00006008,
	CR3_TARGET_VALUE_1 = 0x0000600a,
	CR3_TARGET_VALUE_2 = 0x0000600c,
	CR3_TARGET_VALUE_3 = 0x0000600e,

	//B.4.2 natural-width read-only data fields
	EXIT_QUALIFICATION = 0x00006400,
	IO_RCX = 0x00006402,
	IO_RSI = 0x00006404,
	IO_RDI = 0x00006406,
	IO_RIP = 0x00006408,
	GUEST_LINEAR_ADDRESS = 0x0000640a,
	//B.4.3 natural-width guest-state fields
	GUEST_CR0 = 0x00006800,
	GUEST_CR3 = 0x00006802,
	GUEST_CR4 = 0x00006804,
	GUEST_ES_BASE = 0x00006806,
	GUEST_CS_BASE = 0x00006808,
	GUEST_SS_BASE = 0x0000680a,
	GUEST_DS_BASE = 0x0000680c,
	GUEST_FS_BASE = 0x0000680e,
	GUEST_GS_BASE = 0x00006810,
	GUEST_LDTR_BASE = 0x00006812,
	GUEST_TR_BASE = 0x00006814,
	GUEST_GDTR_BASE = 0x00006816,
	GUEST_IDTR_BASE = 0x00006818,
	GUEST_DR7 = 0x0000681a,
	GUEST_RPS = 0x0000681c,
	GUEST_RIP = 0x0000681e,
	GUEST_RFLAGS = 0x00006820,
	GUEST_PENDING_DEBUG_EXECPTIONS = 0x00006822,
	GUEST_IA32_SYSENTER_ESP = 0x00006824,
	GUEST_IA32_SYSENTER_EIP = 0x00006826,

	//B.4.4 natural-witdh host-state fields
	HOST_CR0 = 0x00006c00,
	HOST_CR3 = 0x00006c02,
	HOST_CR4 = 0x00006c04,
	HOST_FS_BASE = 0x00006c06,
	HOST_GS_BASE = 0x00006c08,
	HOST_TR_BASE = 0x00006c0a,
	HOST_GDTR_BASE = 0x00006c0c,
	HOST_IDTR_BASE = 0x00006c0e,
	HOST_IA32_SYSENTER_ESP = 0x00006c10,
	HOST_IA32_SYSENTER_EIP = 0x00006c12,
	HOST_RSP = 0x00006c14,
	HOST_RIP = 0x00006c16,
};

struct arch {
};

struct vcpu {
	unsigned int vpid;
	unsigned int id;
	struct kvm_run *run;

	struct arch arch;
};

struct vm {
	struct kvm_regs regs;
	struct kvm_sregs sregs;
	//        struct mm_struct *mm;
	struct vcpu *vcpus[VCPU_MAX];
};

int vmx_setup(void);
void vmx_tear_down(void);

long vmm_dev_ioctl_create_vm(unsigned long arg);

#endif
